<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.19-pr16">


  <!--  Spot Style - Point Spot Style _ Map red market_2  -->
  <style name="IconPointSpotStyle-Mapredmarket_2" url="%FIRSTXML%/spots/location-icon-30_user_defaultpoint0_user_defaultpoint01_23.png" visible="false" edge="bottom" ox="0" oy="0" onloaded="showPermanentTooltip(all, bottom);" onover="onoverIconPointSpotStyle-Mapredmarket_2" onout="onoutIconPointSpotStyle-Mapredmarket_2" height="30" width="30" bg="false" bgcolor="0xC7E4FC" bgalpha="1.0" bgroundedge="1" txtshadow="0 0 1 0xFFFFFF 1.0"/>
  <action name="onoverIconPointSpotStyle-Mapredmarket_2"> tween(scale, 1.2); pauseautorotation(forcehotspot); </action>
  <action name="onoutIconPointSpotStyle-Mapredmarket_2"> tween(scale, 1); resumeautorotation(forcehotspot); </action>

  <!--  Spot Style - Default Point Spot Style  -->
  <style name="IconDefaultPointSpotStyle" url="%FIRSTXML%/spots/hotspot_image_sequence_user_defaultpoint0.png" visible="false" frame="0" lastframe="12" framewidth="50" frameheight="50" stopspotsequence="false" crop="0|0|50|50" edge="center" zoom="true" alpha="0.8" onloaded="startspotanimation(0.1);if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););showPermanentTooltip(all);" onover="onoverIconDefaultPointSpotStyle" onout="onoutIconDefaultPointSpotStyle" height="25" width="25"/>
  <action name="onoverIconDefaultPointSpotStyle"> tween(alpha, 1); pauseautorotation(forcehotspot); </action>
  <action name="onoutIconDefaultPointSpotStyle"> tween(alpha, 0.8); resumeautorotation(forcehotspot); </action>
  <!--  unsupported kind of display : PointMap  -->
  <!--  Spot Style - Default Point Spot image   -->
  <style name="IconDefaultPointSpotimage" url="%FIRSTXML%/spots/hotspot_information_user_defaultpoint01_2.png" visible="false" edge="center" zoom="true" alpha="0.8" onloaded="if(scene[get(xml.scene)].planar,if(zoom,set(zoom, false);););showPermanentTooltip(all);" onover="onoverIconDefaultPointSpotimage" onout="onoutIconDefaultPointSpotimage" height="30" width="30"/>
  <action name="onoverIconDefaultPointSpotimage"> tween(alpha, 1); pauseautorotation(forcehotspot); </action>
  <action name="onoutIconDefaultPointSpotimage"> tween(alpha, 0.8); resumeautorotation(forcehotspot); </action>
  <!--  Spot Style - Point Spot Style _ Map red market_3_1  -->
  <style name="IconPointSpotStyle-Mapredmarket_3_1" url="%FIRSTXML%/spots/location-icon-30_user_defaultpoint0_user_defaultpoint01_221_2.png" visible="false" edge="bottom" ox="0" oy="0" alpha="0.8" onloaded="showPermanentTooltip(all, bottom);" onover="onoverIconPointSpotStyle-Mapredmarket_3_1" onout="onoutIconPointSpotStyle-Mapredmarket_3_1"/>
  <action name="onoverIconPointSpotStyle-Mapredmarket_3_1"> tween(scale, 1.2); tween(alpha, 1); </action>
  <action name="onoutIconPointSpotStyle-Mapredmarket_3_1"> tween(scale, 1); tween(alpha, 0.8); </action>
  <!--  **********  -->



  <!-- Spot Style - Load panorama -->

  <style name="IconLoadpanorama" url="%FIRSTXML%/spots/droneview_red_45px_user_defaultpoint5.png" visible="false" edge="center" zoom="true" alpha="0.8" onloaded="showPermanentTooltip(all);" onover="onoverIconLoadpanorama" onout="onoutIconLoadpanorama" height="30" width="30" />
  <action name="onoverIconLoadpanorama">

tween(alpha, 1);

  </action>
  <action name="onoutIconLoadpanorama">

    tween(alpha, 0.8);

  </action>




  <!-- Spot Style - line 80px red -->


  <style name="Iconline80pxred" url="%FIRSTXML%/spots/linered80x_user_defaultpoint01_221_5.png" visible="false" edge="bottom" ox="0" oy="0" alpha="0.8" onloaded="showPermanentTooltip(all, bottom);" onover="onoverIconline80pxred" onout="onoutIconline80pxred" />
  <action name="onoverIconline80pxred">

tween(alpha, 1);
pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconline80pxred">

    tween(alpha, 0.8);
resumeautorotation(forcehotspot);

  </action>


  <!-- Spot Style - line 100px red -->


  <style name="Iconline100pxred" url="%FIRSTXML%/spots/linered100x_user_defaultpoint01_221_4.png" visible="false" edge="bottom" ox="0" oy="0" alpha="0.8" onloaded="showPermanentTooltip(all, bottom);" onover="onoverIconline100pxred" onout="onoutIconline100pxred" />
  <action name="onoverIconline100pxred">

tween(alpha, 1);
pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconline100pxred">

    tween(alpha, 0.8);
resumeautorotation(forcehotspot);

  </action>



  <!-- Spot Style - line 120px red -->


  <style name="Iconline120pxred" url="%FIRSTXML%/spots/linered120x_user_defaultpoint01_221_3.png" visible="false" edge="bottom" ox="0" oy="0" alpha="0.9" onloaded="showPermanentTooltip(all, bottom);" onover="onoverIconline120pxred" onout="onoutIconline120pxred" />
  <action name="onoverIconline120pxred">

tween(alpha, 1);
pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconline120pxred">

    tween(alpha, 0.9);
resumeautorotation(forcehotspot);

  </action>



  <!-- Spot Style - line 60px red -->


  <style name="Iconline60pxred" url="%FIRSTXML%/spots/linered60x_user_defaultpoint01_221_6.png" visible="false" edge="bottom" ox="0" oy="0" alpha="0.8" onloaded="showPermanentTooltip(all, bottom);" onover="onoverIconline60pxred" onout="onoutIconline60pxred" />
  <action name="onoverIconline60pxred">

tween(alpha, 1);
pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconline60pxred">

    tween(alpha, 0.8);
resumeautorotation(forcehotspot);

  </action>




  <!-- Spot Style - line 40px red -->


  <style name="Iconline40pxred" url="%FIRSTXML%/spots/linered40x_user_defaultpoint01_221_7.png" visible="false" edge="bottom" ox="0" oy="0" alpha="0.8" onloaded="showPermanentTooltip(all, bottom);" onover="onoverIconline40pxred" onout="onoutIconline40pxred" />
  <action name="onoverIconline40pxred">

tween(alpha, 1);
pauseautorotation(forcehotspot);

  </action>
  <action name="onoutIconline40pxred">

    tween(alpha, 0.8);
resumeautorotation(forcehotspot);

  </action>


  <!-- Spot Style - okay -->


  <style name="Iconokay" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint0.png" visible="false" edge="center" onhover="onhoverIconokay" onout="onoutIconokay" />
  <action name="onhoverIconokay">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokay">
    hideTooltip();
  </action>




  <!-- Spot Style - okay1 -->


  <style name="Iconokayl1" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayl1" onout="onoutIconokayl1" />
  <action name="onhoverIconokayl1">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayl1">
    hideTooltip();
  </action>

  <style name="Iconokayl2" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayl2" onout="onoutIconokayl2" />
  <action name="onhoverIconokayl2">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayl2">
    hideTooltip();
  </action>

  <style name="Iconokayl3" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayl3" onout="onoutIconokayl3" />
  <action name="onhoverIconokayl3">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayl3">
    hideTooltip();
  </action>

  <style name="Iconokayl4" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayl4" onout="onoutIconokayl4" />
  <action name="onhoverIconokayl4">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayl4">
    hideTooltip();
  </action>

  <style name="Iconokayl5" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayl5" onout="onoutIconokayl5" />
  <action name="onhoverIconokayl5">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayl5">
    hideTooltip();
  </action>

  <style name="Iconokayl6" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayl6" onout="onoutIconokayl6" />
  <action name="onhoverIconokayl6">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayl6">
    hideTooltip();
  </action>



  <style name="Iconokayr1" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayr1" onout="onoutIconokayr1" />
  <action name="onhoverIconokayr1">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayr1">
    hideTooltip();
  </action>

  <style name="Iconokayr2" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayr2" onout="onoutIconokayr2" />
  <action name="onhoverIconokayr2">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayr2">
    hideTooltip();
  </action>

  <style name="Iconokayr3" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayr3" onout="onoutIconokayr3" />
  <action name="onhoverIconokayr3">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayr3">
    hideTooltip();
  </action>

  <style name="Iconokayr4" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayr4" onout="onoutIconokayr4" />
  <action name="onhoverIconokayr4">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayr4">
    hideTooltip();
  </action>

  <style name="Iconokayr5" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayr5" onout="onoutIconokayr5" />
  <action name="onhoverIconokayr5">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayr5">
    hideTooltip();
  </action>

  <style name="Iconokayr6" url="%FIRSTXML%/spots/hotspot_neutral_user_defaultpoint1.png" visible="false" edge="center" onhover="onhoverIconokayr6" onout="onoutIconokayr6" />
  <action name="onhoverIconokayr6">
    showtooltip('hotspot');
  </action>
  <action name="onoutIconokayr6">
    hideTooltip();
  </action>


  <!-- ********** -->
  <!-- Double Click -->
  <!-- id : doubleclick -->
  <!-- ********** -->
  <events name="doubleclick_events" keep="true" ondoubleclick="doubleclick_ondoubleclick"/>
  <action name="doubleclick_ondoubleclick">switchFullscreen();


  </action>
  <!-- ********** -->
  <!-- Loading Information -->
  <!-- id : loaderinfo -->
  <!-- ********** -->

  <events name="loaderinfoevent" onxmlcomplete="loaderinfoupdate();" keep="true"/>

  <action name="loaderinfoupdate">
    if(scene[get(xml.scene)].video,
      set(layer[loaderinfotextfield].visible, false);
    ,
      if (progress.progress == 1,
        delayedcall(0.5, set(layer[loaderinfotextfield].visible, false); );
      ,
        set(layer[loaderinfotextfield].visible, true);
      );
      mul(progresstext, get(progress.progress),100);
      roundval(progresstext);
      txtadd(progresstext, get(progresstext), %);
      set(layer[loaderinfotextfield].html, get(progresstext));
      ifnot(progress.progress GE 1, delayedcall(0.01, loaderinfoupdate() ));
    );
  </action>

  <layer name="loaderinfotextfield" keep="true" zorder="6" type="text" align="center" x="0" y="0" bgborder="0" bg="false" capture="false" handcursor="false" interactivecontent="false" alpha="1" visible="true" css="
         text-align:center;
         color:#ffffff;
         font-family:Arial;
         font-weight:bold;
         font-size:16px;
         " />

  <!-- 360Images Call Out Titles Plugin -->

  <include url="%FIRSTXML%/graphics/callouttitles.xml"/>
  <callout author_context="true"/>

  <!-- 360Images Call Out Titles Plugin
    pulse top 90degre title
  -->


  <style name="call_out_titlescallout_line" type="container" width="2" height="0" bgalpha="1" bgcolor="0xffffff" align="top" edge="bottom" />

  <style name="call_out_titlescallout_line_vertical" type="container" width="0" height="0" bgcolor="0xffffff" rotate="-0" bgborder="0,0,0,2 0xffffff" edge="bottomleft" align="topright" maskchildren="true" />

  <style name="call_out_titlescallout_title" type="text" enabled="false" align="topleft" ox="5" bg="true" bgcolor="0x4941b5" bgalpha="1" bgborder="false" css="color:#ffffff;font-family:Helvetica;font-size:14px;text-align:left;z-index:100000" padding="5 5" />

  <style name="call_out_titlescallout_desc" type="text" enabled="false" align="bottomleft" edge="topleft" ox="0" bg="true" bgcolor="0x000000" bgalpha="0.80000000000000004" bgborder="false" shadow="1" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1" textshadow="1" textshadowrange="5.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1" css="color:#ffffff;font-family:Helvetica;font-size:12px;text-align:left;" padding="5 0" />


  <style name="call_out_titlescallout_pulse" type="container" align="center" bg="false" bgborder="3 0xffffff 1.00" bgroundedge="calc:10 * 2" width="10" height="10" onloaded="pulse(get(name))"/>


  <style name="call_out_titles1callout_line" type="container" width="2" height="0" bgalpha="1" bgcolor="0xffffff" align="top" edge="bottom" />

  <style name="call_out_titles1callout_line_vertical" type="container" width="0" height="0" bgcolor="0xffffff" rotate="-0" bgborder="0,0,0,2 0xffffff" edge="bottomleft" align="topright" maskchildren="true" />

  <style name="call_out_titles1callout_title" type="text" enabled="false" align="topleft" ox="5" bg="true" bgcolor="0x4941b5" bgalpha="1" bgborder="false" css="color:#ffffff;font-family:Helvetica;font-size:14px;text-align:left;z-index:100000" padding="5 5" />

  <style name="call_out_titles1callout_desc" type="text" enabled="false" align="bottomleft" edge="topleft" ox="0" bg="true" bgcolor="0x000000" bgalpha="0.80000000000000004" bgborder="false" shadow="1" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1" textshadow="1" textshadowrange="5.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1" css="color:#ffffff;font-family:Helvetica;font-size:12px;text-align:left;" padding="5 0" />


  <style name="call_out_titles1callout_pulse" type="container" align="center" bg="false" bgborder="3 0xffffff 1.00" bgroundedge="calc:10 * 2" width="10" height="10" onloaded="pulse(get(name))"/>


<!-- top right -->

  <style name="call_out_titles2callout_line" type="container" width="2" height="0" bgalpha="1" bgcolor="0xffffff" align="top" edge="bottom" />

  <style name="call_out_titles2callout_line_vertical" type="container" width="0" height="0" bgcolor="0xffffff" rotate="180" bgborder="0,0,0,2 0xffffff" edge="bottomleft" align="topright" maskchildren="true" />

  <style name="call_out_titles2callout_title" type="text" enabled="false" align="topright" ox="2" bg="true" bgcolor="0x4941b5" bgalpha="1" bgborder="false" css="color:#ffffff;font-family:Helvetica;font-size:14px;text-align:right;transform:rotate(180deg);z-index:100000" padding="5 5" />

  <style name="call_out_titles2callout_desc" type="text" enabled="false" align="bottomright" edge="topright" ox="0" bg="true" bgcolor="0x000000" bgalpha="0.80000000000000004" bgborder="false" shadow="1" shadowrange="4.0" shadowangle="45" shadowcolor="0x000000" shadowalpha="1" textshadow="1" textshadowrange="5.0" textshadowangle="45" textshadowcolor="0x000000" textshadowalpha="1" css="color:#ffffff;font-family:Helvetica;font-size:12px;text-align:right;" padding="5 0" />


  <style name="call_out_titles2callout_pulse" type="container" align="center" bg="false" bgborder="3 0xffffff 1.00" bgroundedge="calc:10 * 2" width="10" height="10" onloaded="pulse(get(name))"/>

<!-- top right -->
  <!-- 360Images Call Out Titles Plugin
  pulse top 90degre title
   -->

  <style visible="false" callout_type="centerscreen" name="okayr1" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="10" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles1callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles1callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles1callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles1callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles1callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />


  <style visible="false" callout_type="centerscreen" name="okayr2" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="40" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles1callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles1callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles1callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles1callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles1callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />


  <style visible="false" callout_type="centerscreen" name="okayr3" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="70" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles1callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles1callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles1callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles1callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles1callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />


  <style visible="false" callout_type="centerscreen" name="okayr4" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="100" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles1callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles1callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles1callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles1callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles1callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />



  <style visible="false" callout_type="centerscreen" name="okayr5" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="130" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles1callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles1callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles1callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles1callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles1callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />


  <style visible="false" callout_type="centerscreen" name="okayr6" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="160" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles1callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles1callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles1callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles1callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles1callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />



<!-- 360Images Call Out Titles Plugin
  pulse top 90degre title left
   -->
   <callout author_context="false"/>
  <style visible="false" callout_type="centerscreen" name="okayl1" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="10" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles2callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles2callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles2callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles2callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles2callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />

  <!-- 360Images Call Out Titles Plugin
  pulse top 90degre title left
   -->
   <callout author_context="false"/>
  <style visible="false" callout_type="centerscreen" name="okayl2" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="40" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles2callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles2callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles2callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles2callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles2callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />

  <!-- 360Images Call Out Titles Plugin
  pulse top 90degre title left
   -->
   <callout author_context="false"/>
  <style visible="false" callout_type="centerscreen" name="okayl3" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="70" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles2callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles2callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles2callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles2callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles2callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />

  <!-- 360Images Call Out Titles Plugin
  pulse top 90degre title left
   -->
   <callout author_context="false"/>
  <style visible="false" callout_type="centerscreen" name="okayl4" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="100" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles2callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles2callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles2callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles2callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles2callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />

  <!-- 360Images Call Out Titles Plugin
  pulse top 90degre title left
   -->
   <callout author_context="false"/>
  <style visible="false" callout_type="centerscreen" name="okayl5" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="130" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles2callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles2callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles2callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles2callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles2callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />


   <callout author_context="false"/>
  <style visible="false" callout_type="centerscreen" name="okayl6" type="container" width="10" height="10" bgroundedge="10" bgcolor="0xffffff" bgalpha="1.00" bgborder="2 0xffffff 1.00" toheight="160" pumpitup="true" rotate="0" onloaded="
	txtadd(parentspot,'hotspot[',get(name),']');

	txtadd(callout_pulse,'callout_pulse_',get(name));
	addlayer(get(callout_pulse));
	layer[get(callout_pulse)].loadstyle(call_out_titles2callout_pulse);
	copy(layer[get(callout_pulse)].parent,parentspot);

	txtadd(callout_line,'callout_line_',get(name));
	addlayer(get(callout_line));
	copy(hotspot[get(name)].callout_line,callout_line);
	layer[get(callout_line)].loadstyle(call_out_titles2callout_line);
	copy(layer[get(callout_line)].parent,parentspot);
	copy(layer[get(callout_line)].x,xpoint);
	copy(layer[get(callout_line)].y,ypoint);

	txtadd(callout_line_vertical,'callout_line_vertical_',get(name));
	addlayer(get(callout_line_vertical));
	copy(hotspot[get(name)].callout_line_vertical,callout_line_vertical);
	layer[get(callout_line_vertical)].loadstyle(call_out_titles2callout_line_vertical);
	txtadd(parentlayer,'layer[',get(callout_line),']');
	copy(layer[get(callout_line_vertical)].parent,parentlayer);

	txtadd(callout_title,'callout_title_',get(name));
	addlayer(get(callout_title));
	copy(hotspot[get(name)].callout_title,callout_title);
	layer[get(callout_title)].loadstyle(call_out_titles2callout_title);
	txtadd(parentlayer2,'layer[',get(callout_line_vertical),']');
	copy(layer[get(callout_title)].parent,parentlayer2);
	getmessage(montitre, get(tooltip));
	copy(layer[get(callout_title)].html,montitre);

	txtadd(callout_desc,'callout_desc_',get(name));
	addlayer(get(callout_desc));
	copy(hotspot[get(name)].callout_desc,callout_desc);
	layer[get(callout_desc)].loadstyle(call_out_titles2callout_desc);
	copy(layer[get(callout_desc)].parent,callout_title);
	getmessage(madesc, get(descriptionid));
	copy(layer[get(callout_desc)].html,madesc);

	if(hotspot[get(name)].onclick, copy(layer[get(callout_line_vertical)].onclick,hotspot[get(name)].onclick);set(layer[get(callout_line_vertical)].bgcapture,true));
	if(hotspot[get(name)].callout_type == onuserclick, set(hotspot[get(name)].onclick,oncallout());set(hotspot[get(name)].bgcapture,true);set(hotspot[get(name)].handcursor,true));
	set(events[testshotspots].onviewchanged,testhotspots();)
 	" oncallout="animate_callout(get(callout_line), get(callout_line_vertical), get(callout_title), get(callout_desc),get(toheight));" oncallin="animate_callin(get(callout_line), get(callout_line_vertical));" />


  <!-- Spot Style - Polygon open image -->
  <!-- fillalpha="0.40000000000000002" -->
  <style name="PolygonPolygonopenimage" visible="false" bordercolor="0xffffff" fillcolor="0x314781" borderwidth="0" borderalpha="1" fillalpha="0.60000000000000002" capture="false" onhover="onhoverPolygonPolygonopenimage" onover="onoverPolygonPolygonopenimage" onout="onoutPolygonPolygonopenimage" />
  <action name="onhoverPolygonPolygonopenimage">
    showTooltip('hotspot');
  </action>

  <action name="onoverPolygonPolygonopenimage">
    set(borderwidth, 0);
  </action>

  <action name="onoutPolygonPolygonopenimage">

    set(borderwidth, 0);
    hideTooltip();
  </action>


  <style name="PolygonPolygonopenimage1" visible="false" bordercolor="0xffffff" fillcolor="0x85c1e966" borderwidth="0" borderalpha="1" fillalpha="0..40000000000000002" capture="false" onhover="onhoverPolygonPolygonopenimage1" onover="onoverPolygonPolygonopenimage1" onout="onoutPolygonPolygonopenimage1" />
  <action name="onhoverPolygonPolygonopenimage1">
    showTooltip('hotspot');
  </action>

  <action name="onoverPolygonPolygonopenimage1">
    set(borderwidth, 0);
  </action>

  <action name="onoutPolygonPolygonopenimage1">

    set(borderwidth, 0);
    hideTooltip();
  </action>


  <style name="PolygonPolygonopenimage2" visible="false" bordercolor="0xffffff" fillcolor="0x2EFFFF" borderwidth="0" borderalpha="1" fillalpha="0.40000000000000002" capture="false" onhover="onhoverPolygonPolygonopenimage2" onover="onoverPolygonPolygonopenimage2" onout="onoutPolygonPolygonopenimage2" />
  <action name="onhoverPolygonPolygonopenimage2">
    showTooltip('hotspot');
  </action>

  <action name="onoverPolygonPolygonopenimage2">
    set(borderwidth, 0);
  </action>

  <action name="onoutPolygonPolygonopenimage2">
    set(borderwidth, 0);
    hideTooltip();
  </action>



  <!-- ********** -->
  <!-- Context menu -->
  <!-- id : contextmenu -->
  <!-- ********** -->
  <contextmenu fullscreen="false" versioninfo="false" touch="true">
    <item name="author" onclick="getmessage(urltoopen,project_author_url);openurl(get(urltoopen),_blank);" />
    <item name="normal" onclick="setViewNormal();
" separator="true"/>
    <item name="architectural" onclick="setViewArchitectural();
"/>
    <item name="littleplanet" onclick="setViewLittlePlanet();
"/>
    <item name="fullscreenentry" onclick="enterFullscreen();
" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" onxmlcomplete="updateContextMenu" changetourlanguage="updateContextMenu" />
  <events name="contextmenuvrevents" keep="true" onvravailable="updateContextMenu();" onvrunavailable="updateContextMenu();" devices="html5" />
  <action name="updateContextMenu">
    getmessage(contextmenu.item[author].caption, project_author_name);
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    set(sceneisfull360, false);
    if(scene[get(xml.scene)].full360,
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
    );
    if (sceneisfull360 AND (device.webgl OR device.flash),
      set(contextmenu.item[littleplanet].visible, true);
      getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    ,
      set(contextmenu.item[littleplanet].visible, false);
    );
    if (device.fullscreensupport,
      if(tour_fullscreen,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, exitFullscreen();
);
       ,
        getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
        set(contextmenu.item[fullscreenentry].onclick, enterFullscreen();
);
      );
     ,
      set(contextmenu.item[fullscreenentry].visible, false);
    );
  </action>

  <!-- ********** -->
  <!-- Classic Control Bar -->
  <!-- id : controlBar_classic -->
  <!-- ********** -->

  <krpano controlBar_classicbarbuilt="false" controlBar_classicbackgroundwidthwhenclosed="0" controlBar_classicbackgroundwidthwhenopened="0" controlBar_classicIsOpened="false" />
  <events name="controlBar_classicevents" onxmlcomplete="controlBar_classicbuildMenuBar();" keep="true" />



  <action name="controlBar_classicbuildMenuBar">
    ifnot (controlBar_classicbarbuilt, controlBar_classicbuildMenu(); set(controlBar_classicbarbuilt, true););
  </action>

  <action name="controlBar_classicbuildMenu">

    set(controlBar_classicbutton_pos, 20);

    set(layer[controlBar_classicbtn_hidecontrols].x, get(controlBar_classicbutton_pos));
    set(layer[controlBar_classicbtn_showcontrols].x, get(controlBar_classicbutton_pos));
    inc(controlBar_classicbutton_pos, 36);
    add(controlBar_classicbackgroundwidthwhenclosed, get(controlBar_classicbutton_pos), 20);



    if (device.desktop,
      set(layer[controlBar_classicbtn_display_help].x, get(controlBar_classicbutton_pos));
      set(layer[controlBar_classicbtn_close_help  ].x, get(controlBar_classicbutton_pos));
      inc(controlBar_classicbutton_pos, 36);
    );

    if (device.fullscreensupport,
      set(layer[controlBar_classicbtn_openfs ].x, get(controlBar_classicbutton_pos));
      set(layer[controlBar_classicbtn_closefs].x, get(controlBar_classicbutton_pos));
      inc(controlBar_classicbutton_pos, 36);
    );









    if (device.desktop,
        set(layer[controlBar_classicbtn_out].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
        set(layer[controlBar_classicbtn_in].x, get(controlBar_classicbutton_pos));
        inc(controlBar_classicbutton_pos, 36);
    );


    inc(controlBar_classicbutton_pos, 20);

    set(controlBar_classicbackgroundwidthwhenopened, get(controlBar_classicbutton_pos));




    add(controlBar_classicVerifyVisibility, 20, 20);
    if(controlBar_classicbackgroundwidthwhenopened == controlBar_classicVerifyVisibility,
      set(controlBar_classicbackgroundwidthwhenopened, 0);


    );



  </action>

  <events name="controlBar_classicStartTourEvents" onTourStart="controlBar_classicCallOnStartTour();" keep="true" />

  <action name="controlBar_classicCallOnStartTour">

		set(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbutton_pos));
		set(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbutton_pos));
		controlBar_classicshowMenuControls();
  </action>



  <style name="controlBar_classic_btn_style" keep="true" alpha="0.8" edge="right" align="right" width="36" height="36" zorder="4" onover="controlBar_classicctrlbaronoveraction();" onout="controlBar_classicctrlbaronoutaction();" onhover="showTooltip('plugin', controlBar_classicmenuTooltipStyle, bottom);" />
  <action name="controlBar_classicctrlbaronoveraction">
    tween(alpha,1,0.1,easeoutquad);
    tween(y,-2,0.1,easeoutquad);
  </action>
  <action name="controlBar_classicctrlbaronoutaction">
    tween(alpha,0.8);
    tween(y,0,0.1,easeoutquad);
    hideTooltip();
  </action>

  <layer name="controlBar_classicmenu_controlbar_bg_img" keep="true" align="bottom" x="0" y="10" url="%FIRSTXML%/graphics/classiccontrolbar/footer.png" zorder="2" width="40" height="40" scale9grid="10|10|80|80" visible="false" />
  <layer name="controlBar_classicmenu_controlbar_bg" keep="true" align="bottom" x="0" y="10" type="container" zorder="3" width="40" height="40" visible="false" alpha="1.0">



    <layer name="controlBar_classicbtn_in" url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_in.png" ondown="viewControlZoomIn(false);" onup="viewControlZoomStop();
" style="controlBar_classic_btn_style" tooltip="controlBar_classiczoomInTip" devices="desktop" visible="false" />
    <layer name="controlBar_classicbtn_out" url="%FIRSTXML%/graphics/classiccontrolbar/btn_zoom_out.png" ondown="viewControlZoomOut(false);
" onup="viewControlZoomStop();
" style="controlBar_classic_btn_style" tooltip="controlBar_classiczoomOutTip" devices="desktop" visible="false" />





    <layer name="controlBar_classicbtn_openfs" url="%FIRSTXML%/graphics/classiccontrolbar/btn_enter_fs.png" onclick="enterFullscreen();
" style="controlBar_classic_btn_style" devices="fullscreensupport" visible="false" tooltip="controlBar_classicopenFsTip" />
    <layer name="controlBar_classicbtn_closefs" url="%FIRSTXML%/graphics/classiccontrolbar/btn_close_fs.png" onclick="exitFullscreen();
" style="controlBar_classic_btn_style" visible="false" devices="fullscreensupport" tooltip="controlBar_classiccloseFsTip" />



    <layer name="controlBar_classicbtn_display_help" url="%FIRSTXML%/graphics/classiccontrolbar/btn_help.png" onclick="controlBar_classicdisplayHelp();" style="controlBar_classic_btn_style" devices="desktop" visible="false" tooltip="controlBar_classicdisplayHelpTip" />
    <layer name="controlBar_classicbtn_close_help" url="%FIRSTXML%/graphics/classiccontrolbar/btn_help.png" onclick="controlBar_classiccloseHelp();" style="controlBar_classic_btn_style" visible="false" devices="desktop" tooltip="controlBar_classichideHelpTip" />



    <layer name="controlBar_classicbtn_hidecontrols" url="%FIRSTXML%/graphics/classiccontrolbar/btn_hide_controls.png" style="controlBar_classic_btn_style" onclick="controlBar_classichideMenuControls();hideTourControls();
" visible="false" tooltip="controlBar_classichideControlsTip" />
    <layer name="controlBar_classicbtn_showcontrols" url="%FIRSTXML%/graphics/classiccontrolbar/btn_show_controls.png" style="controlBar_classic_btn_style" onclick="controlBar_classicshowMenuControls();showTourControls();
" tooltip="controlBar_classicdisplayControlsTip" visible="false" />
  </layer>





  <action name="controlBar_classichideMenuControls">
    set(controlBar_classicIsOpened, false);
    set(layer[controlBar_classicbtn_hidecontrols].visible, false);
    set(layer[controlBar_classicbtn_showcontrols].visible, true);
    controlBar_classicupdateFullscreenButtons();




    set(layer[controlBar_classicbtn_in].visible , false);
    set(layer[controlBar_classicbtn_out].visible, false);




    controlBar_classicupdateHelpButtons();


    if(controlBar_classicbackgroundwidthwhenclosed == 0,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, false);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, false);
    ,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, true);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, true);
    );
    tween(layer[controlBar_classicmenu_controlbar_bg_img].width,get(controlBar_classicbackgroundwidthwhenclosed),0.5,easeOutQuad);
    tween(layer[controlBar_classicmenu_controlbar_bg].width,get(controlBar_classicbackgroundwidthwhenclosed),0.5,easeOutQuad);
    tween(layer[controlBar_classicmenu_controlbar_bg_img].alpha,1.0,0.5,easeOutQuad);
  </action>
  <action name="controlBar_classicshowMenuControls">
    set(controlBar_classicIsOpened, true);
    set(layer[controlBar_classicbtn_hidecontrols].visible, true);
    set(layer[controlBar_classicbtn_showcontrols].visible, false);
    if(controlBar_classicbackgroundwidthwhenopened == 0,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, false);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, false);
    ,
      set(layer[controlBar_classicmenu_controlbar_bg_img].visible, true);
      set(layer[controlBar_classicmenu_controlbar_bg].visible, true);
    );
    tween(layer[controlBar_classicmenu_controlbar_bg_img].alpha,1.0,0.5,easeOutQuad);
    controlBar_classicshowMenuButtons();


      tween(layer[controlBar_classicmenu_controlbar_bg_img].width, get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);
      tween(layer[controlBar_classicmenu_controlbar_bg].width, get(controlBar_classicbackgroundwidthwhenopened),0.5,easeOutQuad);


  </action>
  <action name="controlBar_classicshowMenuButtons">
    if (device.desktop,
    set(layer[controlBar_classicbtn_in].visible , true);
    set(layer[controlBar_classicbtn_out].visible, true);
    );




    controlBar_classicupdateHelpButtons();


    controlBar_classicupdateFullscreenButtons();




  </action>

  <layer name="controlBar_classichelpScreen" align="center" keep="true" onclick="controlBar_classiccloseHelp();" url="%FIRSTXML%/graphics/classiccontrolbar/help_screen_bg.png" visible="false" zorder="97" height="10%" width="prop" />

  <layer name="controlBar_classichelpScreenFg" align="center" keep="true" onclick="controlBar_classiccloseHelp();" displayed="false" url="%FIRSTXML%/graphics/classiccontrolbar/help_screen_fg.png" alpha="0.8" height="50%" width="prop" zorder="98" visible="false" />
  <action name="controlBar_classicdisplayHelp">
    set(layer[controlBar_classichelpScreenFg].displayed,true);
    set(layer[controlBar_classichelpScreen].visible,true);
    tween(layer[controlBar_classichelpScreen].height, 50%, 1, easeOutQuad,
      set(layer[controlBar_classichelpScreenFg].visible,true);
    );
    controlBar_classicupdateHelpButtons();
  </action>
  <action name="controlBar_classiccloseHelp">
    set(layer[controlBar_classichelpScreenFg].displayed,false);
    set(layer[controlBar_classichelpScreenFg].visible,false);
    tween(layer[controlBar_classichelpScreen].height, 10%, 1, easeOutQuad,
      set(layer[controlBar_classichelpScreen].visible,false);
    );
    controlBar_classicupdateHelpButtons();
  </action>
  <action name="controlBar_classicHideHelpButtons">
		set(layer[controlBar_classicbtn_display_help].visible, false);
		set(layer[controlBar_classicbtn_close_help].visible, false);
  </action>
  <action name="controlBar_classicShowHelpButtons">
		if (layer[controlBar_classichelpScreenFg].displayed,
			set(layer[controlBar_classicbtn_close_help].visible, true);
			set(layer[controlBar_classicbtn_display_help].visible, false);
		,
			set(layer[controlBar_classicbtn_display_help].visible, true);
			set(layer[controlBar_classicbtn_close_help].visible, false);
		);
  </action>
  <action name="controlBar_classicupdateHelpButtons">
	if (device.desktop,
		if (controlBar_classicIsOpened,
			controlBar_classicShowHelpButtons();
		,
			controlBar_classicHideHelpButtons();
		);
	,
		controlBar_classicHideHelpButtons();
	);
  </action>



  <events name="controlBar_classicmenufullscreenchangeevent" onenterfullscreen="controlBar_classicupdateFullscreenButtons();" onexitfullscreen="controlBar_classicupdateFullscreenButtons();" keep="true"/>
  <action name="controlBar_classicHideFullscreenButtons">
		set(layer[controlBar_classicbtn_openfs].visible , false);
		set(layer[controlBar_classicbtn_closefs].visible, false);
  </action>
  <action name="controlBar_classicShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[controlBar_classicbtn_openfs].visible , false);
				set(layer[controlBar_classicbtn_closefs].visible, true);
			,
				set(layer[controlBar_classicbtn_openfs].visible ,true);
				set(layer[controlBar_classicbtn_closefs].visible,false);
			);
		,
			controlBar_classicHideFullscreenButtons();
		);
  </action>
  <action name="controlBar_classicupdateFullscreenButtons">
		if (controlBar_classicIsOpened,
			controlBar_classicShowFullscreenButtons();
		,
			controlBar_classicHideFullscreenButtons();
		);
  </action>




  <layer name="controlBar_classicmenuTooltipStyle" keep="true" enabled="false" capture="false" type="text" align="center" bg="false" bgborder="0" txtshadow="1.0 1.0 4.0 0x000000 1" css="color:#e6e6e6;font-family:Helvetica;font-weight:bold;font-size:14px;text-align:left;" interactivecontent="false" zorder="0" visible="false" html="" padding="2" xoffset="0" yoffset="0" edge="bottom" />



  <!-- ********* -->
  <!-- Gyroscope -->
  <!-- ********* -->


  <plugin name="gyroscope" url="%FIRSTXML%/graphics/gyro2.js" keep="true" devices="no-desktop.and.html5" onunavailable="checkGyroUnavailable();" sensor_mode="1" friction="auto" autocalibration="true" touch_mode="full" onavailable="delayedcall(1, checkGyroAvailability(););" enabled="false" activated="false" />

  <events name="gyroscopeEvents" onnewpano="planarGyroscopeTest();" keep="true" />

  <action name="planarGyroscopeTest">
  if(plugin[gyroscope],
    if(scene[get(xml.scene)].full360,
      set(sceneisfull360, false);
      sub(viewhfov, panoview.hmax, panoview.hmin);
      if (viewhfov == 360,
        sub(viewvfov, panoview.vmax, panoview.vmin);
        if (viewvfov == 180,
          set(sceneisfull360, true);
        );
      );
      if (sceneisfull360,
        set(plugin[gyroscope].camroll, true);
      ,
        set(plugin[gyroscope].camroll, false);
      );
    ,
      set(plugin[gyroscope].camroll, false);
    );
  );
  </action>

  <action name="changeGyroscopeState">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,
      if(%1,
        set(plugin[gyroscope].activated,true);
      ,
        set(plugin[gyroscope].activated,false);
      );
      if (%1 != plugin[gyroscope].enabled,
        if(plugin[gyroscope].activated,
          switch(plugin[gyroscope].enabled);
        ,
          set(plugin[gyroscope].enabled, false);
        );
        if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
      );
    );
  );
  </action>

  <action name="checkGyroAvailability">
  if(plugin[gyroscope],
    if (plugin[gyroscope].isavailable,

      set(sceneisfull360, false);
      if (scene[get(xml.scene)].full360,
        sub(viewhfov, panoview.hmax, panoview.hmin);
        if (viewhfov == 360,
          sub(viewvfov, panoview.vmax, panoview.vmin);
          if (viewvfov == 180,
            set(sceneisfull360, true);
          );
        );
      );
      set(delaythegyrocheck, false);
      if (sceneisfull360 AND tour_firstlittleplanet, set(delaythegyrocheck, true));

      ifnot(delaythegyrocheck,
        set(tour_gyroscopedevices, true);
        events.dispatch(ongyroscopeavailable);
      ,
        delayedcall(1, checkGyroAvailability(););
      );
    ,
      set(tour_gyroscopedevices, false);
    );
    if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
  ,
    checkGyroUnavailable();
  );
  </action>

  <action name="checkGyroUnavailable">
  set(plugin[gyroscope].activated, false);
  set(plugin[gyroscope].enabled, false);
  set(tour_gyroscopedevices, false);
  events.dispatch(ongyroscopeunavailable);
  </action>

  <!-- ********** -->
  <!-- Force Landscape on Mobile -->
  <!-- id : ForceLandscapeMobilePlugin -->
  <!-- ********** -->

  <events name="mobileorientation_events" devices="mobile" keep="true" onresize="mobileorientation_portrait_mode_check();"/>

  <action name="mobileorientation_portrait_mode_check" device="mobile">
		div(aspect, stagewidth, stageheight);
		if(aspect != lastaspect OR '%1' == 'true',
			copy(lastaspect, aspect);
			if(stagewidth GT stageheight,
				tween(layer[mobileorientation_rotate_device_required].alpha, 0.0, 0.0);
			,
				tween(layer[mobileorientation_rotate_device_required].alpha, 1.0);
				delayedcall(3.0, tween(layer[mobileorientation_rotate_device_required].alpha, 0.0, 1.0););
			);
		);
  </action>

  <layer name="mobileorientation_rotate_device_required" keep="true" devices="mobile" url="%FIRSTXML%/graphics/rotate_device.png" width="80%" height="prop" align="center" edge="center" autoalpha="true" alpha="0.0" enabled="false" />




  <!-- ********** -->
  <!-- Compass -->
  <!-- id : compass -->
  <!-- ********** -->
  <!--<events name="compassevts" keep="true" onnewpano="compassUpdateOrientation();" onviewchanged="compassUpdateOrientation();" onTourStart="set(layer[compassbackground].started, true);showcompass();" hidetourcontrols="hidecompass();" showtourcontrols="set(layer[compassbackground].started, true);showcompass();" />

  <action name="compassUpdateOrientation">
    if(scene[get(xml.scene)].planar,
      set(layer[compassbackground].active, false);
      hidecompass();
    ,

      set(layer[compassbackground].active, true);
      mod(compasshlookat, view.hlookat, 360);
      mul(compassheading, -1, get(scene[get(xml.scene)].heading));
      if (compassheading == null, set(compassheading, 0));
      sub(layer[compassrotatebackground].rotate, compassheading, compasshlookat);

      showcompass();
    );
  </action>


  <action name="hidecompass">
    set(layer[compassbackground].visible, false);
  </action>
  <action name="showcompass">
    if(tour_displaycontrols,
    if(layer[compassbackground].active AND layer[compassbackground].started,set(layer[compassbackground].visible, true););
    ,hidecompass(););
  </action>
-->


  <!-- ********** -->
  <!-- Logo -->
  <!-- id : logo -->
  <!-- ********** -->

  <layer align="topleft" x="10" y="10" zorder="7" name="logo" keep="true" visible="false" capture="false" url="%FIRSTXML%/graphics/logo/logo-1.png" handcursor="false" />

  <events name="logoevents" onTourStart="showlogo();" keep="true" />

  <action name="hidelogo">
    set(layer[logo].visible, false);
  </action>
  <action name="showlogo">
      set(layer[logo].visible, true);
  </action>





  <!-- ********** -->
  <!-- Logo1 -->
  <!-- id : logo1 -->
  <!-- ********** -->
  <!-- EMPTY PICTURE : no image file -->
  <!-- ********** -->
  <!-- map -->
  <!-- id : logo2 -->
  <!-- ********** -->


  <!-- <layer align="bottomleft" x="10" y="10" zorder="9" name="logo2" keep="true" visible="false" capture="false" tooltip="logo2tooltipText" onhover="showTooltip('plugin');" onout="hideTooltip();" url="%FIRSTXML%/graphics/logo2/whatsapp.png" onclick="getmessage(urltoopen,logo2websiteurl);openurl(get(urltoopen),_blank);" /> -->
  <layer align="bottomleft" x="10" y="10" zorder="9" name="logo2" keep="true" visible="false" capture="false" tooltip="logo2tooltipText" onhover="showTooltip('plugin');" onout="hideTooltip();" url="%FIRSTXML%/graphics/logo2/location-map-flat.png" onclick="getmessage(urltoopen,logo2websiteurl);openurl(get(urltoopen),_blank);" />

  <events name="logo2events" onTourStart="showlogo2();" hidetourcontrols="hidelogo2();" showtourcontrols="showlogo2();" keep="true" />

  <action name="hidelogo2">
    set(layer[logo2].visible, false);
  </action>
  <action name="showlogo2">
    if (tour_displaycontrols,
      set(layer[logo2].visible, true);
    );
  </action>





  <!-- ********** -->
  <!-- brochure -->
  <!-- id : logo3 -->
  <!-- ********** -->

  <!-- <layer align="bottomleft" x="10" y="100" zorder="10" name="logo3" keep="true" visible="false" capture="false" tooltip="logo3tooltipText" onhover="showTooltip('plugin');" onout="hideTooltip();" url="%FIRSTXML%/graphics/logo3/flyer-icon_with_text_n_background_60x.png" onclick="getmessage(urltoopen,logo3websiteurl);openurl(get(urltoopen),_blank);" /> -->
  <layer align="bottomleft" x="10" y="100" zorder="10" name="logo3" keep="true" visible="false" capture="false" tooltip="logo3tooltipText" onhover="showTooltip('plugin');" onout="hideTooltip();" url="%FIRSTXML%/graphics/logo2/whatsapp.png" onclick="getmessage(urltoopen,logo3websiteurl);openurl(get(urltoopen),_blank);" />

  <events name="logo3events" onTourStart="showlogo3();" hidetourcontrols="hidelogo3();" showtourcontrols="showlogo3();" keep="true" />

  <action name="hidelogo3">
    set(layer[logo3].visible, false);
  </action>
  <action name="showlogo3">
    if (tour_displaycontrols,
      set(layer[logo3].visible, true);
    );
  </action>




  <!-- ********** -->
  <!-- Panorama Combobox -->
  <!-- id : panoramacombobox -->
  <!-- ********** -->

  <!-- path to the scrollarea plugin -->
  <panoramacombobox_kr_scrollareaplugin url.html5="%FIRSTXML%/graphics/scrollarea.js" url.flash="%FIRSTXML%/graphics/scrollarea.swf" />

  <!-- core internal layer styles -->
  <style name="panoramacombobox_kr_container_style" type="container" maskchildren="true" bgcapture="true" visible="false" onclick="panoramacombobox_kr_onclick_event();" mergedalpha="false" alpha="1.0" />
  <style name="panoramacombobox_kr_marker_style" type="text" align="righttop" edge="center" html="▼" havemarkersize="false" onautosized="set(havemarkersize,true);" mergedalpha="false" alpha="1.0" />
  <style name="panoramacombobox_kr_item_style" type="text" wordwrap="false" vcenter="true" align="lefttop" onover="if(!combbox_item_pressed,onoveritem());asyncloop(hovering,,if(!combbox_item_pressed,onoutitem()));" ondown="onoveritem(); set(combbox_item_pressed,true);" onup="onoutitem(); set(combbox_item_pressed,false);" onoveritem="set(bg,true);" onoutitem="set(bg,false);" mergedalpha="false" alpha="1.0" />



  <panoramacombobox_kr_design name="default" margin="2" open_close_speed="0.25">
    <!-- default design - white box with black text and blue selection -->
    <style name="panoramacombobox_kr_container_style" bgalpha="1.0" bgcolor="0xFFFFFF" bgborder="1 0xFFFFFF 0.5" bgroundedge="1" bgshadow="0 1 3 0x000000 1.0" />
    <style name="panoramacombobox_kr_marker_style" css="color:#FFFFFF;" bg="false" txtshadow="0 0 2 0x000000 1" />
    <style name="panoramacombobox_kr_item_style" css="color:#222222;" padding="4" bg="false" bgcolor="0xC7E4FC" bgalpha="1.0" bgroundedge="1" txtshadow="0 0 1 0xFFFFFF 1.0" />
  </panoramacombobox_kr_design>




  <!-- internal events -->
  <events name="panoramacombobox_kr_xml_plugin_events" keep="true" onxmlcomplete="panoramacombobox_kr_parse_xml_elements();" onresize="panoramacombobox_kr_closelist();" />

  <!-- krpano version check -->
  <action name="panoramacombobox_kr_versioncheck" autorun="preinit">
    if(build LT '2017-09-13',
      error('combobox.xml - too old krpano version!');
      set(events[panoramacombobox_kr_xml_plugin_events].name, null);
      set(action[panoramacombobox_kr_addComboboxLayer].content, '');
      set(action[panoramacombobox_kr_removeComboboxLayer].content, '');
    );
  </action>

  <action name="panoramacombobox_kr_parse_xml_elements" scope="local">
        copy(cb, combobox["panoramacombobox"]);
        if(cb AND cb.name AND cb.parsed != true,
          set(cb.parsed, true);
          panoramacombobox_kr_addComboboxLayer(get(cb.name), get(cb.design));
          copy(ly, layer[get(cb.name)]);
          copyattributes(get(ly), get(cb));
          set(ly.keep, true);
          def(item_cnt, integer, get(cb.item.count));
          if(item_cnt GT 0,
            def(item_i, integer, 0);
            loop(item_i LT  item_cnt,
              panoramacombobox_kr_additem(get(ly.name), get(cb.item[get(item_i)].name), get(cb.item[get(item_i)].caption), get(cb.item[get(item_i)].onclick));
              inc(item_i);
            );
          );
        );
  </action>

  <!-- dynamically add a combobox layer -->
  <action name="panoramacombobox_kr_addComboboxLayer" scope="local" args="cbname, design">
    <!-- create the layer -->
    addlayer(get(cbname));
    copy(cb, layer[get(cbname)]);
    set(cb.keep, true);

                            <!-- copy the design settings (or set defaults) -->
    if(!panoramacombobox_kr_design[get(design)].name, set(design,'default'));
    copy(cb.cbdesign, panoramacombobox_kr_design[get(design)]);
    calc(cb.margin, cb.cbdesign.margin !== null ? cb.cbdesign.margin : 2);
    calc(cb.open_close_speed, cb.cbdesign.open_close_speed !== null ? cb.cbdesign.open_close_speed : 0.25);
                            <!-- load the styles and copy the design style settings -->
    cb.loadstyle(panoramacombobox_kr_container_style);
    copyattributes(get(cb), get(cb.cbdesign.style[panoramacombobox_kr_container_style]));

                            <!-- add/build/map actions -->
    calc(cb.addItem,          'panoramacombobox_kr_additem(' + cbname + ', null, "%%1", "%%2");');
    calc(cb.addNamedItem,     'panoramacombobox_kr_additem(' + cbname + ', "%%1", "%%2", "%%3");');
    calc(cb.addIdItem,        'panoramacombobox_kr_additem(' + cbname + ', "%%1", "%%2", "%%3");');
    calc(cb.selectItem,       'panoramacombobox_kr_finditem(' + cbname + ', "%%1", __cb_fi); if(__cb_fi GE 0, panoramacombobox_kr_selectitem(' + cbname + ', get(__cb_fi))); delete(__cb_fi);');
    calc(cb.selectItemByName, 'panoramacombobox_kr_selectitem(' + cbname + ', "%%1");');
    calc(cb.selectIdItem,     'panoramacombobox_kr_selectitem(' + cbname + ', "%%1");');
    calc(cb.removeAll,        'panoramacombobox_kr_removeitems(' + cbname + ');');
    calc(cb.openList,         'panoramacombobox_kr_openlist(' + cbname + ');');
    calc(cb.closeList,        'panoramacombobox_kr_closelist(' + cbname + ');');

                            <!-- create sub-layers -->
    def(saname, string, 'panoramacombobox_kr_%1_scrollarea');
    addlayer(get(saname));
    copy(sa, layer[get(saname)]);
    copy(sa.parent, cbname);
    copy(sa.url, panoramacombobox_kr_scrollareaplugin.url);
    copy(sa.keep, true);
    copy(sa.align, lefttop);
    set(sa.direction, v);
    set(sa.enabled, false);
    set(sa.width, 100%);
    set(sa.height, 100%);
    copy(cb.scrollarea, sa);

    def(mkname, string, 'panoramacombobox_kr_%1_marker');
    addlayer(get(mkname));
    copy(mk, layer[get(mkname)]);
    copy(mk.parent, saname);
    copy(mk.keep, true);
    mk.loadstyle(panoramacombobox_kr_marker_style);
    copyattributes(get(mk), get(cb.cbdesign.style[panoramacombobox_kr_marker_style]));
    copy(cb.marker, mk);

                            <!-- item data array -->
    cb.createarray('item');

                            <!-- item autosizing information -->
    set(cb.autosize_i, 0);
    set(cb.autosize_cnt, 0);
    set(cb.autosize_max_w, 0);
    set(cb.autosize_max_h, 0);

    set(cb.lastselecteditemindex, 0);
    set(cb.selecteditemindex, 0);
  </action>


  <!-- dynamically remove a combobox element -->
  <action name="panoramacombobox_kr_removeComboboxLayer" scope="local" args="cbname">
    if(layer[get(cbname)],
      copy(cb, layer[get(cbname)]);
      if(cb === global.openedcombobox, delete(global.openedcombobox));
      if(cb,
        removelayer(get(cbname), true);
      );
    );
  </action>


  <!-- default onclick event for combobox elements: open the list -->
  <action name="panoramacombobox_kr_onclick_event">
    panoramacombobox_kr_openlist(get(name));
  </action>


  <!-- dynamically add items -->
  <action name="panoramacombobox_kr_additem" scope="local" args="cbname, itemname, itemcaption, itemonclick">
    copy(cb, layer[get(cbname)]);

                            <!-- when no item name is set, generate an automatic one -->
    if(itemname === null, calc(itemname, 'autoname_' + cb.item.count); );

                            <!-- save the item caption and onclick event -->
    copy(cb.item[get(itemname)].caption, itemcaption);
    copy(cb.item[get(itemname)].onclick, itemonclick);

    inc(cb.autosize_cnt);

                            <!-- create the item layer/textfield -->
    calc(itemlayername, 'comboboxitem_' + cbname + '_' + itemname);
    addlayer(get(itemlayername));
    copy(li, layer[get(itemlayername)]);



    li.loadstyle(panoramacombobox_kr_item_style);
    copyattributes(get(li), get(cb.cbdesign.style[panoramacombobox_kr_item_style]));




    copy(li.parent, cb.scrollarea.name);
    copy(li.keep, true);
    copy(li.cblayername, cb.name);
    copy(li.itemname, itemname);
    copy(li.html, itemcaption);
    set(li.onautosized, delayedcall(0,panoramacombobox_kr_item_autosize_update()) );
    set(li.onclick, panoramacombobox_kr_item_onclick() );

    copy(cb.item[get(itemname)].itemlayername, itemlayername);
  </action>


  <!-- onautosized callback from the item textfield -->
  <action name="panoramacombobox_kr_item_autosize_update" scope="local">
    copy(cb, layer[get(caller.cblayername)]);
    inc(cb.autosize_i);
    Math.max(cb.autosize_max_w, caller.width);
    Math.max(cb.autosize_max_h, caller.height);
    if(cb.autosize_i == cb.autosize_cnt, panoramacombobox_kr_align_items(get(cb.name)); );
  </action>


  <!-- align the image and set the combobox size -->
  <action name="panoramacombobox_kr_align_items" scope="local" args="cbname">
    copy(cb, layer[get(cbname)]);
    if(cb.marker.havemarkersize == false OR cb.scrollarea.loaded == false,
                              <!-- wait until everything is ready -->
      delayedcall(calc(cb.name + '_waitformarkersize'), 0.01, panoramacombobox_kr_align_items(get(cbname)) );
      ,
                              <!-- set the item positions and the combobox size -->
      if(global.openedcombobox === cb, panoramacombobox_kr_closelist() );
      copy(sa, cb.scrollarea);
      calc(itemwidth, cb.margin GT 0 ? -2 * cb.margin : '100%');
      copy(mk_w, cb.marker.width);
      copy(item_cnt, cb.autosize_cnt);

      for(def(item_i, integer, 0), item_i LT item_cnt, inc(item_i),
        copy(li, layer[get(cb.item[get(item_i)].itemlayername)]);
        set(li.x, get(cb.margin));
        copy(li.width, itemwidth);
        copy(li.height, cb.autosize_max_h);
        calc(li.y, cb.margin + item_i * (cb.autosize_max_h + cb.margin));
      );

      if(cb.width == null OR cb.width == cb.lastautosizedwidth,
                                <!-- no combobox width (or an autosized width) set - set the largest item width -->
        calc(cb.width, cb.margin + cb.autosize_max_w + 2 + mk_w + cb.margin);
        copy(cb.lastautosizedwidth, cb.width);
      );

      calc(cb.height, 2*cb.margin + cb.autosize_max_h);
      calc(sa.height, cb.margin + item_cnt*(cb.margin+cb.autosize_max_h));
      calc(sa.y, -(cb.selecteditemindex * (cb.autosize_max_h + cb.margin)));
      calc(cb.marker.x, cb.margin + mk_w/2);
      tween(layer[get(cb.name)].marker.y, calc(cb.margin + cb.selecteditemindex*(cb.autosize_max_h + cb.margin) + cb.autosize_max_h/2), 0.1);
    );
  </action>


  <!-- default onclick event for items: select the current item, close the list and call the item onclick event -->
  <action name="panoramacombobox_kr_item_onclick" scope="local">
    copy(cb, layer[get(caller.cblayername)]);
    copy(itemname, caller.itemname);
    panoramacombobox_kr_selectitem(get(cb.name), get(itemname));

    if(global.openedcombobox === cb, panoramacombobox_kr_closelist() );

    if(cb.item[get(itemname)].onclick,
                              <!-- call the onclick event after the combobox has closed -->
      delayedcall(get(cb.open_close_speed),
        copy(cb.curitem, cb.item[get(itemname)]);
        callwith(cb,
          cb.item[get(itemname)].onclick();
        );
      );
    );
  </action>


  <!-- select an item -->
  <action name="panoramacombobox_kr_selectitem" scope="local" args="cbname, itemname">
    if(global.combbox_item_pressed != true,
      copy(cb, layer[get(cbname)]);
      copy(cb.lastselecteditemindex, cb.selecteditemindex);
      copy(cb.selecteditemindex, cb.item[get(itemname)].index);
                              <!-- call onchange event on selection change -->
      if(cb.lastselecteditemindex != cb.selecteditemindex AND cb.onchange,
        callwith(cb, onchange() );
      );
      if(global.openedcombobox === cb,
                                <!-- when opened, just close to the selected item -->
        panoramacombobox_kr_closelist();
        ,
        if(layer[get(cbname)].scrollarea.loaded,
          layer[get(cbname)].scrollarea.stopscrolling();
          calc(offset, cb.selecteditemindex*(cb.autosize_max_h + cb.margin));
          tween(layer[get(cbname)].marker.y, calc(cb.margin + offset + cb.autosize_max_h/2), 0);
          tween(layer[get(cbname)].scrollarea.y, calc(-offset), 0, default, layer[get(cbname)].scrollarea.update(); );
        );
      );
    );
  </action>


  <!-- find an item by its caption, the global variable defined in 'returnvariable' will contain the index  -->
  <action name="panoramacombobox_kr_finditem" scope="local" args="cbname, itemcaption, returnvariable">
    copy(cb, layer[get(cbname)]);
    copy(item_cnt, cb.item.count);
    set(calc('global.' + returnvariable), -1);
    for(def(item_i, integer, 0), item_i LT  item_cnt, inc(item_i),
      if(cb.item[get(item_i)].caption == itemcaption,
        copy(calc('global.' + returnvariable), item_i);
        copy(item_i, item_cnt);
      );
    );
  </action>


  <!-- remove all items (to be able to add new ones) -->
  <action name="panoramacombobox_kr_removeitems" scope="local" args="cbname">
    copy(cb, layer[get(cbname)]);
    if(global.openedcombobox === cb, panoramacombobox_kr_closelist() );

                            <!-- remove all item layers -->
    calc(item_i, cb.item.count - 1);
    loop(item_i GE 0,
      removelayer(get(cb.item[get(item_i)].itemlayername));
      dec(item_i);
    );

                            <!-- reset the item information -->
    set(cb.item.count, 0);
    set(cb.autosize_i,0);
    set(cb.autosize_cnt, 0);
    set(cb.autosize_max_w, 0);
    set(cb.autosize_max_h, 0);
    set(cb.selecteditemindex, 0);
    set(cb.lastselecteditemindex, 0);
    if(cb.width == cb.lastautosizedwidth, set(cb.width, null));
  </action>


  <!-- open the combobox list -->
  <action name="panoramacombobox_kr_openlist" scope="local" args="cbname">
    <!-- if another combobox is already open, close that one first -->
    if(global.openedcombobox !== null, panoramacombobox_kr_closelist() );

    copy(cb, layer[get(cbname)]);
    copy(global.openedcombobox, cb);

                            <!-- find the available screen space above or below the combobox -->
    calc(cbheight, 2*cb.margin + cb.autosize_max_h);
    set(lx1, 0);
    set(ly1, 0);
    copy(lx2, cb.pixelwidth);
    copy(ly2, cbheight);
    layertoscreen(get(cbname), lx1,ly1, lx1,ly1);
    layertoscreen(get(cbname), lx2,ly2, lx2,ly2);
    calc(space_above, ly1 - area.pixely);
    calc(space_below, area.pixelheight - (ly2 - area.pixely));

                            <!-- the required space for full opening: -->
    calc(openheight, cb.margin + cb.autosize_cnt*(cb.margin+cb.autosize_max_h) );

                            <!-- vertical centered alignment? -->
    calc(cb_edge, cb.edge ? cb.edge : cb.align);
    calc(iscentered, cb_edge == 'left' OR cb_edge == 'center' OR cb_edge == 'right');
    if(iscentered,
      calc(openheight_max, space_above + space_below);
      ,
      Math.max(openheight_max, space_above, space_below);
    );

                            <!-- limit the height to the available space (minus some margin) -->
    Math.min(openheight, calc(openheight_max + cbheight - 20));

                            <!-- need vertical offset? (depending on the available space and the align/edge setting) -->
    set(yoffset, null);
    calc(top_overflow, -ly1 + area.pixely + openheight/2);
    calc(bottom_overflow, ly2 - area.pixely + openheight/2 - area.pixelheight);
    if(cb.parent,
                              <!-- no vertical offset inside other layers, do only a height clipping -->
      Math.max(max_overflow, top_overflow, bottom_overflow, 0);
      sub(openheight, max_overflow);
      ,
      if(iscentered,
        if(openheight GE (area.pixelheight - 20),
          set(yoffset,0);
          ,
          if(top_overflow GT 0, calc(yoffset, cb.y + top_overflow); );
          if(bottom_overflow GT 0, calc(yoffset, cb.y - bottom_overflow); );
        );
      ,
        indexoftxt(isbottomalign, get(cb_edge), 'bottom');
        if(space_above GT space_below,
          if(isbottomalign LT 0, calc(yoffset, cb.y - openheight + cbheight); );
          ,
          if(isbottomalign GE 0, calc(yoffset, cb.y - openheight + cbheight); );
        );
      );
    );
    if(yoffset != null,
      copy(cb.ybackup, cb.y);
      tween(layer[get(cbname)].y, calc(yoffset), get(cb.open_close_speed));
    );

                            <!-- center the opened list at the selected item -->
    calc(centeritem_y, -1 * (cb.margin + cb.selecteditemindex*(cb.margin+cb.autosize_max_h) + cb.autosize_max_h/2 - openheight/2));
    clamp(centeritem_y, calc(openheight - cb.scrollarea.height), 0);

                            <!-- apply the changes now -->
    tween(layer[get(cbname)].height, get(openheight), get(cb.open_close_speed));
    tween(layer[get(cbname)].scrollarea.y, get(centeritem_y), get(cb.open_close_speed), default, layer[get(cbname)].scrollarea.update(); );

                            <!-- special html5/flash case:
       rotating textfields (the marker symbol here) are not possible in
       flash (a flashplayer limitation), so use a rotated symbol instead.
    -->
    if(device.html5,
      tween(layer[get(cbname)].marker.rotate, 90, get(cb.open_close_speed));
      ,
      set(layer[get(cbname)].marker.html, '◀');
    );

                            <!-- enable the scrollarea to allow the user to drag it -->
    set(cb.scrollarea.enabled, true);

                            <!-- install a global onmousedown event to close the list when clicking at the pano -->
    set(events[panoramacombobox_kr_xml_plugin_events].onmousedown, panoramacombobox_kr_closelist() );
  </action>


  <!-- close the current open list -->
  <action name="panoramacombobox_kr_closelist" scope="local">
    if(global.openedcombobox !== null,
      copy(cb, global.openedcombobox);
      delete(global.openedcombobox);

                              <!-- clear the global onmousedown event -->
      set(events[panoramacombobox_kr_xml_plugin_events].onmousedown, null);

                              <!-- disable the dragging -->
      set(cb.scrollarea.enabled, false);

                              <!-- closing animations -->
      calc(offset, cb.selecteditemindex*(cb.autosize_max_h + cb.margin));
      if(cb.ybackup !== null, tween(cb.y, get(cb.ybackup), get(cb.open_close_speed)));
      layer[get(cb.name)].scrollarea.stopscrolling();
      tween(layer[get(cb.name)].height, calc(2*cb.margin + cb.autosize_max_h), get(cb.open_close_speed));
      tween(layer[get(cb.name)].scrollarea.y, calc(-offset), get(cb.open_close_speed), default, layer[get(cb.name)].scrollarea.update(); );
      tween(layer[get(cb.name)].marker.y, calc(cb.margin + offset + cb.autosize_max_h/2), get(cb.open_close_speed));
                              <!-- special html5/flash case: rotate marker or change symbol -->
      if(device.html5,
        tween(layer[get(cb.name)].marker.rotate, 0, get(cb.open_close_speed));
        ,
        set(layer[get(cb.name)].marker.html, '▼');
      );
    );
  </action>

  <events name="panoramacomboboxStartTourEvents" onTourStart="set(layer[panoramacombobox].isStarted, true);if(layer[panoramacombobox].isLoaded,panoramacomboboxShow(););" keep="true" />


  <combobox name="panoramacombobox" design="" keep="true" visible="false" zorder="11" align="topright" x="5" y="10" onloaded="panoramacomboboxLoaded();" isStarted="false" isLoaded="false" />

  <action name="panoramacomboboxLoaded">

    layer[panoramacombobox].removeAll();


    panoramacomboboxAddItem(pano918_title, pano918, pano918, false);
    panoramacomboboxAddItem(pano919_title, pano919, pano919, false);
    panoramacomboboxAddItem(pano920_title, pano920, pano920, false);
    panoramacomboboxAddItem(pano929_title, pano929, pano929, false);
    panoramacomboboxAddItem(pano921_title, pano921, pano921, false);
    panoramacomboboxAddItem(pano922_title, pano922, pano922, false);
    panoramacomboboxAddItem(pano923_title, pano923, pano923, false);
    panoramacomboboxAddItem(pano924_title, pano924, pano924, false);
    panoramacomboboxAddItem(pano925_title, pano925, pano925, false);
    panoramacomboboxAddItem(pano926_title, pano926, pano926, false);
    panoramacomboboxAddItem(pano927_title, pano927, pano927, false);
    panoramacomboboxAddItem(pano928_title, pano928, pano928, false);
    set(layer[panoramacombobox].isLoaded, true);

    if(layer[panoramacombobox].isStarted,
      panoramacomboboxShow();
    );
  </action>


  <action name="panoramacomboboxAddItem">
    getmessage(caption, %1);

    indexoftxt(found, get(caption), '&amp;');
    if(found GE 0,
      subtxt(part1, get(caption), 0, get(found));
      add(found, 1);
      subtxt(part2, get(caption), get(found), get(caption.length));
      txtadd(caption, get(part1), '&amp;', get(part2));
    );
    if(%4,
      txtadd(title, "&#x00A0;&#x00A0;&#x00A0;", get(caption));
    ,
      set(title, get(caption));
    );

    layer[panoramacombobox].addNamedItem(%2, get(title), mainloadscene(%3));
  </action>

  <action name="panoramacomboboxUpdateLanguage">
    layer[panoramacombobox].closeList();
    layer[panoramacombobox].removeAll();


    panoramacomboboxAddItem(pano918_title, pano918, pano918, false);
    panoramacomboboxAddItem(pano919_title, pano919, pano919, false);
    panoramacomboboxAddItem(pano920_title, pano920, pano920, false);
    panoramacomboboxAddItem(pano929_title, pano929, pano929, false);
    panoramacomboboxAddItem(pano921_title, pano921, pano921, false);
    panoramacomboboxAddItem(pano922_title, pano922, pano922, false);
    panoramacomboboxAddItem(pano923_title, pano923, pano923, false);
    panoramacomboboxAddItem(pano924_title, pano924, pano924, false);
    panoramacomboboxAddItem(pano925_title, pano925, pano925, false);
    panoramacomboboxAddItem(pano926_title, pano926, pano926, false);
    panoramacomboboxAddItem(pano927_title, pano927, pano927, false);
    panoramacomboboxAddItem(pano928_title, pano928, pano928, false);

    panoramacomboboxUpdateList();
  </action>

  <events name="panoramacomboboxEvents" hidetourcontrols="panoramacomboboxHide();" showtourcontrols="panoramacomboboxShow();" onnewpano="panoramacomboboxOnPanorama();" changetourlanguage="panoramacomboboxUpdateLanguage();" keep="true" />

  <action name="panoramacomboboxHide">
    set(layer[panoramacombobox].visible, false);
  </action>

  <action name="panoramacomboboxShow">
  if(layer[panoramacombobox].isLoaded,
    if (layer[panoramacombobox].item.count GT 0,
      set(layer[panoramacombobox].visible, true);
    ,
      set(layer[panoramacombobox].visible, false);
    );
  ,
    set(layer[panoramacombobox].visible, false);
  );
  </action>

  <action name="panoramacomboboxOnPanorama">
    if(layer[panoramacombobox].isLoaded,
      panoramacomboboxUpdateList();
    ,
      delayedcall(0.2, panoramacomboboxOnPanorama);
    );
  </action>

  <action name="panoramacomboboxUpdateList">
    set(itemtoselect, get(scene[get(xml.scene)].name));
    layer[panoramacombobox].selectItemByName(get(itemtoselect));
  </action>

  <action name="panoramacomboboxOpenComboboxList">
    layer[panoramacombobox].openList();
  </action>

  <action name="panoramacomboboxCloseComboboxList">
    layer[panoramacombobox].closeList();
  </action>

  <!-- ********** -->
  <!-- Thumbnails Stack -->
  <!-- id : stackthumbs -->
  <!-- ********** -->

  <krpano stackthumbsIsOpen="false" stackthumbsFirstLoad="true" />

  <events name="stackthumbsEvents" onnewpano="stackthumbsClose(0);" onTourStart="stackthumbsBuild();" hidetourcontrols="stackthumbsHide();" showtourcontrols="stackthumbsShow();" hidetourthumbnails="stackthumbsHide();" showtourthumbnails="stackthumbsShow();" keep="true"/>

  <layer name="stackthumbsMainLayer" type="container" zorder="12" width="1" height="1" alpha="1" keep="true" x="0" y="0" visible="true" align="bottomright" />

  <action name="stackthumbsHide">
    for (set(hstcstackthumbsi, 0), hstcstackthumbsi LT scene.count, inc(hstcstackthumbsi),
      txtadd(thumbname,'stackthumbs_', get(hstcstackthumbsi));
      txtadd(thumbnameimg, get(thumbname), '_img');
      set(layer[get(thumbname)].visible, false);
      set(layer[get(thumbnameimg)].visible, false);
    );
  </action>
  <action name="stackthumbsShow">
  if (tour_displaythumbnails,
    for (set(sstcstackthumbsi, 0), sstcstackthumbsi LT scene.count, inc(sstcstackthumbsi),
      txtadd(thumbname,'stackthumbs_', get(sstcstackthumbsi));
      txtadd(thumbnameimg, get(thumbname), '_img');
      set(layer[get(thumbname)].visible, true);
      set(layer[get(thumbnameimg)].visible, true);
    );
  );
  </action>

  <action name="stackthumbsMagnify">
    tween(layer[%1].alpha,  1.0, 0.3, easeInQuad);
    tween(layer[%1].scale, 1.05, 0.3, easeInQuad);
    tween(layer[get(layer[%1].thumbborder)].alpha,  1.0, 0.3, easeInQuad);
    tween(layer[get(layer[%1].thumbborder)].scale, 1.05, 0.3, easeInQuad);
    set(layer[get(layer[%1].thumbborder)].bgborder, '2 0xffffff 1');
    set(layer[get(layer[%1].thumbborder)].mergedalpha, false);
  </action>

  <action name="stackthumbsLies">
    tween(layer[%1].alpha, 0.8, 0.3, easeInQuad);
    tween(layer[%1].scale, 1.0, 0.3, easeInQuad);
    tween(layer[get(layer[%1].thumbborder)].alpha, 0.8, 0.3, easeInQuad);
    tween(layer[get(layer[%1].thumbborder)].scale, 1.0, 0.3, easeInQuad);
    set(layer[get(layer[%1].thumbborder)].bgborder, '2 0xffffff 0.20000000000000001');
    set(layer[get(layer[%1].thumbborder)].mergedalpha, false);
  </action>


  <krpano stackthumbsBuilt="false"/>

  <action name="stackthumbsBuild">
    ifnot (stackthumbsBuilt,
    for (set(bststackthumbsi, 0), bststackthumbsi LT scene.count, inc(bststackthumbsi),

        copy(thumburl, scene[get(bststackthumbsi)].thumburl);
        txtadd(thumbname,'stackthumbs_', get(bststackthumbsi));
        txtadd(thumbnameimg, get(thumbname), '_img');

        addplugin(get(thumbname));
        addplugin(get(thumbnameimg));
        set(layer[get(thumbnameimg)].parent, "stackthumbsMainLayer");
        set(layer[get(thumbname)].parent, get(thumbnameimg));
        set(layer[get(thumbnameimg)].url   , get(thumburl));
        set(layer[get(thumbname)].type, 'container');
        set(layer[get(thumbnameimg)].keep  , true);
        set(layer[get(thumbname)].keep  , true);
        set(layer[get(thumbnameimg)].align , bottomright);
        set(layer[get(thumbname)].align , topleft);
        set(layer[get(thumbnameimg)].edge  , center);

        set(layer[get(thumbnameimg)].width , 50);
        set(layer[get(thumbnameimg)].height, 25);
        set(layer[get(thumbname)].width , 50);
        set(layer[get(thumbname)].height, 25);

        set(layer[get(thumbnameimg)].alpha , 0.8);
        set(layer[get(thumbnameimg)].visible , false);
        set(layer[get(thumbname)].alpha , 0.8);
        set(layer[get(thumbname)].visible , false);

        if (bststackthumbsi GE 4, set(reali, 4), set(reali, get(bststackthumbsi)));

        mul(layer[get(thumbnameimg)].x, get(reali),3);
        mul(layer[get(thumbnameimg)].y, get(reali),3);

        add(closedthumboffsetx, 10, 25);
        add(layer[get(thumbnameimg)].x, get(closedthumboffsetx));

        add(closedthumboffsety, 10, 12);
        add(layer[get(thumbnameimg)].y, get(closedthumboffsety));

        copy(layer[get(thumbnameimg)].xsmall, layer[get(thumbnameimg)].x);
        copy(layer[get(thumbnameimg)].ysmall, layer[get(thumbnameimg)].y);

        add(layer[get(thumbnameimg)].zorder, 0, bststackthumbsi);
        add(layer[get(thumbname)].zorder, 0, bststackthumbsi);
        set(layer[get(thumbname)].bgborder, '2 0xffffff 0.20000000000000001');
        set(layer[get(thumbname)].mergedalpha, false);

          set(layer[get(thumbnameimg)].tooltip,get(scene[get(bststackthumbsi)].titleid));
        set(layer[get(thumbnameimg)].thumbborder, get(thumbname));
        set(layer[get(thumbnameimg)].thumbpos, get(bststackthumbsi));
        set(layer[get(thumbnameimg)].linkedpano, get(scene[get(bststackthumbsi)].name) );
        set(layer[get(thumbnameimg)].onclick, stackthumbsOpen() );
      );

      set(stackthumbsBuilt, true);

      stackthumbsShow();


    );
  </action>

  <action name="stackthumbsOpenThumb">
    if(%3 != NEXT,
      set(pos,0);
      copy(curpos, layer[%1].thumbpos);
      set(xdst, 0);
      set(ydst, 0);
    );
    if (pos LT curpos,
      inc(pos);

        inc(ydst, 60);
        if (ishtml5,
          sub(ymax, stageheight, 50);
         ,
          sub(ymax, area.pixelheight, 50);
        );
        dec(ymax, 30);
        if(ydst GT ymax,
          inc(xdst, 110);
          set(ydst,0);
        );

      stackthumbsOpenThumb(%1,%2,NEXT);
     ,
      set(openthumboffsetx, 50);
      add(openthumboffsetx, 10);
      add(xdst, get(openthumboffsetx));

      set(openthumboffsety, 25);
      add(openthumboffsety, 10);
      add(ydst, get(openthumboffsety));

      tween(layer[%1].x, get(xdst) );
      tween(layer[%1].y, get(ydst) );
      tween(layer[%1].width , 100);
      tween(layer[%1].height, 50);
      tween(layer[%2].width , 100);
      tween(layer[%2].height, 50);
    );
  </action>

  <action name="stackthumbsOpen">
    for (set(oststackthumbsi, 0), oststackthumbsi LT scene.count, inc(oststackthumbsi),
      txtadd(thumbname,'stackthumbs_',get(oststackthumbsi));
      txtadd(thumbnameimg, get(thumbname), '_img');
      stackthumbsOpenThumb(get(thumbnameimg), get(thumbname));
      set(layer[get(thumbnameimg)].onover, stackthumbsMagnify(get(name)); );
      set(layer[get(thumbnameimg)].onout, stackthumbsLies(get(name)); hideTooltip(); );
      set(layer[get(thumbnameimg)].onhover, showTooltip('plugin'); );
      set(layer[get(thumbnameimg)].onclick, stackthumbsLies(get(name)); stackthumbsClose(0); mainloadscene(get(linkedpano)); );
    );

    set(stackthumbsIsOpen, true);
  </action>

  <action name="stackthumbsClose">
    if (stackthumbsIsOpen,
    for (set(cststackthumbsi, 0), cststackthumbsi LT scene.count, inc(cststackthumbsi),
      txtadd(thumbname,'stackthumbs_', get(cststackthumbsi));
      txtadd(thumbnameimg, get(thumbname), '_img');
      stackthumbsCloseThumb(get(thumbnameimg), get(thumbname));
    );

    set(stackthumbsIsOpen, false);
    );
  </action>
  <action name="stackthumbsCloseThumb">
    tween(layer[%1].x, get(layer[%1].xsmall));
    tween(layer[%1].y, get(layer[%1].ysmall));
    tween(layer[%1].width, 50);
    tween(layer[%1].height, 25);
    tween(layer[%2].width, 50);
    tween(layer[%2].height, 25);
    set(layer[%1].alpha, 0.8);
    set(layer[%1].onover, '');
    set(layer[%1].onout, '');
    set(layer[%1].onhover, '');hideTooltip();
    set(layer[%1].onclick, stackthumbsOpen() );
  </action>



  <action name="viewControlZoomIn">
	if(%1,
		if(%2,
			if(%2 LT view.fovmin,
				zoomto(get(view.fovmin));
			,
				if(%2 LT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, -1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, -1);
	);
  </action>
  <action name="viewControlZoomOut">
	if(%1,
		if(%2,
			if(%2 GT view.fovmax,
				zoomto(get(view.fovmax));
			,
				if(%2 GT view.fov,
					zoomto(%2);
				);
			);
		,
			set(fov_moveforce, +1);
			delayedcall(0.1, viewControlZoomStop());
		);
	,
		set(fov_moveforce, +1);
	);
  </action>
  <action name="viewControlZoomStop">
	set(fov_moveforce, 0);
  </action>

  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>


  <action name="displayImage">
    if (layer[displayedStandardImage],
      if(layer[displayedStandardImage].doNotDeleteMe,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, false);

        if (%1 == layer[displayedStandardImage].url,
          applyDisplayedImageObjectAnimation(%8);
        ,
          setDisplayedImageObjectParameters(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10);
        );
      ,
        set(layer[displayedStandardImage].currentCall, false);
        set(layer[displayedStandardImage].doNotDeleteMe, true);
        events.dispatch(onremovedisplayedobject);
        delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      );
    ,
      if(%10,
        addlayer(displayedStandardImageOverlay);
        set(layer[displayedStandardImageOverlay].keep, false);
        set(layer[displayedStandardImageOverlay].width, 100%);
        set(layer[displayedStandardImageOverlay].height, 100%);
        set(layer[displayedStandardImageOverlay].type, container);
        set(layer[displayedStandardImageOverlay].zorder, 98);
        set(layer[displayedStandardImageOverlay].visible, false);
        set(layer[displayedStandardImageOverlay].onclick, applyDisplayedImageObjectAnimation(%8););
        set(layer[displayedStandardImageOverlay].bgcolor, "0x%11");
        set(layer[displayedStandardImageOverlay].bgalpha, %12);
        set(layer[displayedStandardImageOverlay].bgcapture, true);
      );
      addlayer(displayedStandardImage);
      set(layer[displayedStandardImage].keep, false);
      set(layer[displayedStandardImage].onclick, applyDisplayedImageObjectAnimation(%8););
      set(layer[displayedStandardImage].zorder , 99);
      set(layer[displayedStandardImage].currentCall, true);
      set(layer[displayedStandardImage].doNotDeleteMe, true);
      set(layer[displayedStandardImage].onloaded, resizeDisplayedImageObject());
      events.dispatch(onremovedisplayedobject);
      delayedcall(0.2,displayImage(%1, %2, %3, %4, %5, %6, %7, %8, %9, %10, %11, %12););
      set(layer[displayedStandardImage].visible, false);
    );
  </action>
  <action name="applyDisplayedImageObjectAnimation">resumeautorotation(forcehotspot);

    if (%1,
      stoptween(layer[displayedStandardImage].width, layer[displayedStandardImage].height);
      tween(layer[displayedStandardImage].width|layer[displayedStandardImage].height, 1|1, 1, easeOutQuad, WAIT);
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    ,
      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););removelayer(displayedStandardImage);
    );
  </action>
  <action name="setDisplayedImageObjectParameters">
    set(layer[displayedStandardImage].url       , %1);
    set(layer[displayedStandardImage].align     , %2);
    set(layer[displayedStandardImage].x         , %3);
    set(layer[displayedStandardImage].y         , %4);
    set(layer[displayedStandardImage].imgwidth  , %5);
    set(layer[displayedStandardImage].imgheight , %6);
    set(layer[displayedStandardImage].animated  , %8);
    set(layer[displayedStandardImage].applyratio, %9);
    set(layer[displayedStandardImage].overlay   , %10);
    if (%7,pauseautorotation(forcehotspot);
);
  </action>
  <action name="resizeDisplayedImageObject">
    if(layer[displayedStandardImage].url,
    set(layer[displayedStandardImage].fullwidth, get(layer[displayedStandardImage].width));
    set(layer[displayedStandardImage].fullheight, get(layer[displayedStandardImage].height));
    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].width , 1);
      set(layer[displayedStandardImage].height, 1);
    );
    if(layer[displayedStandardImage].imgwidth != "" AND layer[displayedStandardImage].imgheight != "",
      if(layer[displayedStandardImage].imgwidth == "prop",
        set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
        indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
        if(tempDisplayedImageObjectHeightPercent GT 0,
          txtreplace(tempDisplayedImageObjectHeight, '%', '');
          mul(tempDisplayedImageObjectHeight, get(stageheight));
          div(tempDisplayedImageObjectHeight, 100);
          Math.round(tempDisplayedImageObjectHeight);
        );
        mul(flyingImgWidth,get(layer[displayedStandardImage].fullwidth),get(tempDisplayedImageObjectHeight));
        div(flyingImgWidth,get(layer[displayedStandardImage].fullheight));
        Math.round(flyingImgWidth);
        set(layer[displayedStandardImage].imgwidth , get(flyingImgWidth));
        set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
      ,
        if(layer[displayedStandardImage].imgheight == "prop",
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          mul(flyingImgHeight,get(layer[displayedStandardImage].fullheight),get(tempDisplayedImageObjectWidth));
          div(flyingImgHeight,get(layer[displayedStandardImage].fullwidth));
          Math.round(flyingImgHeight);
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight , get(flyingImgHeight));
        ,
          set(tempDisplayedImageObjectWidth, get(layer[displayedStandardImage].imgwidth));
          set(tempDisplayedImageObjectHeight, get(layer[displayedStandardImage].imgheight));
          indexoftxt(tempDisplayedImageObjectWidthPercent, get(tempDisplayedImageObjectWidth), "%");
          indexoftxt(tempDisplayedImageObjectHeightPercent, get(tempDisplayedImageObjectHeight), "%");
          if(tempDisplayedImageObjectWidthPercent GT 0,
            txtreplace(tempDisplayedImageObjectWidth, '%', '');
            mul(tempDisplayedImageObjectWidth, get(stagewidth));
            div(tempDisplayedImageObjectWidth, 100);
            Math.round(tempDisplayedImageObjectWidth);
          );
          if(tempDisplayedImageObjectHeightPercent GT 0,
            txtreplace(tempDisplayedImageObjectHeight, '%', '');
            mul(tempDisplayedImageObjectHeight, get(stageheight));
            div(tempDisplayedImageObjectHeight, 100);
            Math.round(tempDisplayedImageObjectHeight);
          );
          set(layer[displayedStandardImage].imgwidth , get(tempDisplayedImageObjectWidth));
          set(layer[displayedStandardImage].imgheight, get(tempDisplayedImageObjectHeight));
        );
      );
    ,
      set(layer[displayedStandardImage].imgwidth , get(layer[displayedStandardImage].fullwidth));
      set(layer[displayedStandardImage].imgheight, get(layer[displayedStandardImage].fullheight));
    );

    set(resizedwidth, get(layer[displayedStandardImage].imgwidth));
    set(resizedheight, get(layer[displayedStandardImage].imgheight));
    if(layer[displayedStandardImage].applyratio,
      sub(resizedstagewidth, get(stagewidth), get(layer[displayedStandardImage].x));
      sub(resizedstageheight, get(stageheight), get(layer[displayedStandardImage].y));
      Math.abs(resizedstagewidth);
      Math.abs(resizedstageheight);
      if(resizedwidth GT resizedstagewidth,
        mul(tempresizedheight, get(resizedheight), get(resizedstagewidth));
        div(tempresizedheight, get(resizedwidth));
        Math.round(tempresizedheight);
        set(resizedwidth, get(resizedstagewidth));
        set(resizedheight, get(tempresizedheight));
      );
      if(resizedheight GT resizedstageheight,
        mul(tempresizedwidth, get(resizedwidth), get(resizedstageheight));
        div(tempresizedwidth, get(resizedheight));
        Math.round(tempresizedwidth);
        set(resizedheight, get(resizedstageheight));
        set(resizedwidth, get(tempresizedwidth));
      );
    );

    if(layer[displayedStandardImage].animated,
      set(layer[displayedStandardImage].animated, false);
      tween(layer[displayedStandardImage].width , get(resizedwidth), 1, easeOutQuad);
      tween(layer[displayedStandardImage].height, get(resizedheight), 1, easeOutQuad);
    ,
      set(layer[displayedStandardImage].width , get(resizedwidth));
      set(layer[displayedStandardImage].height, get(resizedheight));
    );
    if(layer[displayedStandardImage].overlay,set(layer[displayedStandardImageOverlay].visible, true););
    set(layer[displayedStandardImage].visible, true);
    ,
      delayedcall(0.2,resizeDisplayedImageObject(););
    );
  </action>
  <events name="displayedImageObjectEvents" keep="true" onremovedisplayedobject="displayedImageObjectOnRemoveDisplayedObject" onresize="if(layer[displayedStandardImage],resizeDisplayedImageObject());" />
  <action name="displayedImageObjectOnRemoveDisplayedObject">
    ifnot(layer[displayedStandardImage].currentCall,if(layer[displayedStandardImage].visible,resumeautorotation(forcehotspot);

      if(layer[displayedStandardImage].overlay,removelayer(displayedStandardImageOverlay););
      removelayer(displayedStandardImage);
    ););
  </action>


  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);set(fullscreen,false);</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);set(fullscreen,true);</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>


  <events name="krpanoExitFullscreenEvent" onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););" keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>

  <action name="setViewArchitectural">
	if(normalViewActivated,stopSetViewTweens(););
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewArchitecturalComplete();
  </action>

  <action name="setViewArchitecturalComplete">
	set(view.fovmax, get(panoview.fovmax));
	set(view.fisheyefovlink, 0.5);
	tween(view.architectural, 1.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.fisheye, 0.0, distance(1.0, 0.45), easeOutQuad,
		set(view.stereographic,false);
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	);
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
  </action>

  <action name="setViewNormal">
	stopSetViewTweens();
	if(current_view_isflat === true,
		setViewNonFlat(VFOV);
	);
	setViewNormalComplete();
  </action>

  <action name="setViewNormalComplete">
	set(view.fisheyefovlink, 0.5);
	set(view.fovmax, get(panoview.fovmax));
	tween(view.architectural, 0.0, distance(1.0, 0.45));
	tween(view.pannini, 0.0, distance(1.0, 0.45), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	tween(view.vlookat, get(panoview.v), distance(90, 0.45));
	tween(view.fov, get(panoview.fov), distance(50, 0.45));
	tween(view.fisheye, 0.0, distance(1.0, 0.45),
		set(view.stereographic,false);
	);
  </action>

  <krpano normalViewActivated="true" />
  <action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
	stoptween(view.pannini);
  </action>

  <action name="setViewLittlePlanet">
	set(sceneisfull360, false);
	if(scene[get(xml.scene)].full360,
		sub(viewhfov, panoview.hmax, panoview.hmin);
		if (viewhfov == 360,
			sub(viewvfov, panoview.vmax, panoview.vmin);
			if (viewvfov == 180,
				set(sceneisfull360, true);
			);
		);
	);
	if (sceneisfull360 AND (device.webgl OR device.flash),
		if(normalViewActivated,stopSetViewTweens(););
		if(current_view_isflat === true,
			setViewNonFlat(VFOV);
		);
		setViewLittlePlanetComplete();
	);
  </action>

  <action name="setViewLittlePlanetComplete">
	set(backtonormalfirst,false);
	if(view.pannini GE 1.0, set(backtonormalfirst,true));
	if(view.stereographic == false, set(backtonormalfirst,true));
	if(backtonormalfirst, hideTooltip();tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeOutQuad, WAIT); );
	set(view.stereographic, true);
	set(view.fisheyefovlink, 1.5);
	tween(view.architectural, 0.0, 0.25);
	tween(view.vlookat, 90, distance(179, 1.50));
	tween(view.pannini, 0.0, distance(1.0, 0.75), easeOutQuad, if(panniniViewActivated,restoreViewFromPannini();););
	if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
	tween(view.fisheye, 1.0, distance(1.0, 0.75));
	tween(view.fov, 150, distance(179, 0.75));
  </action>

</krpano>